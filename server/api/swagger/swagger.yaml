swagger: "2.0"
info:
  version: "0.0.1"
  title: Indicadores
# during dev, should point to your local machine
host: localhost:8000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
securityDefinitions:
 Bearer:
  description: |
   For accessing the API a valid JWT token must be passed in all the queries in
   the 'Authorization' header.


   A valid JWT token is generated by the API and retourned as answer of a call
   to the route /login giving a valid user & password.


   The following syntax must be used in the 'Authorization' header :

       Bearer: xxxxxx.yyyyyyy.zzzzzz
  type: apiKey
  name: Authorization
  in: header
paths:
  /login:
    x-swagger-router-controller: login
    post:
      operationId: authenticate
      tags:
        - auth
      description: |
        Allow users to log in, and to receive a Token
      parameters:
        -
         in: body
         name: body
         description: The email/password
         required: true
         schema:
          $ref: '#/definitions/Login'
      responses:
        '200':
         description: Login Success
         schema:
          $ref: '#/definitions/Token'
        '400':
         description: Whether the user is not found or error while login
         schema:
          $ref: '#/definitions/Error'
        '403':
         description: >-
          If user is not found (bad credentials) OR if user can not login (a
          concierge of an unsctive client)
         schema:
          $ref: '#/definitions/Error'
  /movie:
    # our controller name
    x-swagger-router-controller: movie
    get:
      security:
        - Bearer: []
      description: get the movies list
      # define the type of response for Success "200" and Error
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetMoviesListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      security:
        - Bearer: []
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
  /movie/{id}:
    # our controller name
    x-swagger-router-controller: movie
    get:
      security:
        - Bearer: []
      description: get a movie
      # define the type of response for Success "200" and Error
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetMovieResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


# complex objects have schema definitions
definitions:
  Login:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
      error:
        type: string
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  GetMoviesListResponse:
    required:
      - movies
    properties:
      # The array of movies
      movies:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            year:
              type: number
  GetMovieResponse:
    required:
      - id
      - title
      - year
    properties:
      id:
        type: string
      title:
        type: string
      year:
        type: number

  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
