variables:
    CONTAINER_SERVER_RELEASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/mgdi-api
    CONTAINER_FRONT_RELEASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/mgdi-web
    DOCKER_API_VERSION: "1.39"
stages:
    - web_app_registry
    - server_registry
    - deploy
tags:
    - docker

web_app_registry:
    image: docker:git
    only:
        - master
        - tags
    services:
        - docker:18-dind
    stage: web_app_registry
    dependencies:
        - web_app_build
    script:
        - cd client
        - docker build -t $CONTAINER_FRONT_RELEASE_IMAGE .
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
        - docker push $CONTAINER_FRONT_RELEASE_IMAGE:latest
        - if [ "${CI_COMMIT_TAG}" != "" ]; then docker tag $CONTAINER_FRONT_RELEASE_IMAGE:latest $CONTAINER_FRONT_RELEASE_IMAGE:$CI_COMMIT_TAG && docker push $CONTAINER_FRONT_RELEASE_IMAGE:$CI_COMMIT_TAG ; fi

server_registry:
    image: docker:git
    only:
        - master
        - tags
    services:
        - docker:18-dind
    stage: server_registry
    dependencies:
        - server_build
    script:
        - cd server
        - echo $CONTAINER_SERVER_RELEASE_IMAGE
        - docker build -t $CONTAINER_SERVER_RELEASE_IMAGE .
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
        - docker push $CONTAINER_SERVER_RELEASE_IMAGE:latest
        - if [ "${CI_COMMIT_TAG}" != "" ]; then docker tag $CONTAINER_SERVER_RELEASE_IMAGE:latest $CONTAINER_SERVER_RELEASE_IMAGE:$CI_COMMIT_TAG && docker push $CONTAINER_SERVER_RELEASE_IMAGE:$CI_COMMIT_TAG ; fi
deploy:
    image: ubuntu:latest
    stage: deploy
    only:
        - master
        - tags
    dependencies:
        - web_app_registry
        - server_registry
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - cp $SSH_PRIVATE_KEY_DESENV ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - ssh-keyscan $SSH_HOST_DESENV >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
    script:
        - echo 'Parando o servico' $DOCKER_NAME_DESENV_WEB
        - ssh "${SSH_USER_DESENV}@${SSH_HOST_DESENV}" "docker-compose stop ${DOCKER_NAME_DESENV_WEB}; docker rmi -f ${CONTAINER_FRONT_RELEASE_IMAGE}; echo y|docker-compose up -d --no-deps --build ${DOCKER_NAME_DESENV_WEB}"
        - echo 'Parando o servico' $DOCKER_NAME_DESENV_API
        - ssh "${SSH_USER_DESENV}@${SSH_HOST_DESENV}" "docker-compose stop ${DOCKER_NAME_DESENV_API}; docker rmi -f ${CONTAINER_SERVER_RELEASE_IMAGE}; echo y|docker-compose up -d --no-deps --build ${DOCKER_NAME_DESENV_API}"
        - echo 'Imagens atualizadas'
