variables:
    CONTAINER_SERVER_RELEASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/mgdi-api
    CONTAINER_FRONT_RELEASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/mgdi-web
stages:
    - web_app_build
    - web_app_registry
    - server_build
    - server_registry
    - deploy
web_app_build:
    image: node:6
    stage: web_app_build
    tags:
      - gitlab-org
    script:
        - cd client
        - npm install -g @angular/cli@1.0.6
        - npm install
        - npm install jquery@2.2.4
        - ng build --env=docker
    artifacts:
        paths:
            - client/dist

web_app_registry:
    image: docker:git
    services:
    - docker:dind
    stage: web_app_registry
    dependencies:
    - web_app_build
    script:
        - cd client
        - docker build -t $CONTAINER_FRONT_RELEASE_IMAGE .
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
        - docker push $CONTAINER_FRONT_RELEASE_IMAGE:latest
        - if [ "${CI_COMMIT_TAG}" != "" ]; then docker tag $CONTAINER_FRONT_RELEASE_IMAGE:latest $CONTAINER_FRONT_RELEASE_IMAGE:$CI_COMMIT_TAG && docker push $CONTAINER_FRONT_RELEASE_IMAGE:$CI_COMMIT_TAG ; fi

server_build:
    image: node:7
    stage: server_build
    tags:
      - gitlab-org

    script:
        - cd server
        - npm install
    artifacts:
        paths:
            - server/node_modules/

server_registry:
    image: docker:git
    services:
    - docker:dind
    stage: server_registry
    dependencies:
    - server_build
    script:
        - cd server
        - echo $CONTAINER_SERVER_RELEASE_IMAGE
        - docker build -t $CONTAINER_SERVER_RELEASE_IMAGE .
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
        - docker push $CONTAINER_SERVER_RELEASE_IMAGE:latest
        - if [ "${CI_COMMIT_TAG}" != "" ]; then docker tag $CONTAINER_SERVER_RELEASE_IMAGE:latest $CONTAINER_SERVER_RELEASE_IMAGE:$CI_COMMIT_TAG && docker push $CONTAINER_SERVER_RELEASE_IMAGE:$CI_COMMIT_TAG ; fi
deploy:
  image: ubuntu:latest
  stage: deploy
  dependencies:
  - web_app_registry
  - server_registry
  before_script:
      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - cp $SSH_PRIVATE_KEY_HOMOLOGA ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keyscan $SSH_HOST_HOMOLOGA >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
  script:
      - echo 'Parando o servico ${DOCKER_NAME_HOMOLOGACAO_WEB}'
      - ssh "${SSH_USER_HOMOLOGA}@${SSH_HOST_HOMOLOGA}" "docker-compose stop ${DOCKER_NAME_HOMOLOGACAO_WEB}; docker rmi -f ${CONTAINER_FRONT_RELEASE_IMAGE}; echo y|docker-compose up -d --no-deps --build ${DOCKER_NAME_HOMOLOGACAO_WEB}"
      - echo 'Parando o servico ${DOCKER_NAME_HOMOLOGACAO_API}'
      - ssh "${SSH_USER_HOMOLOGA}@${SSH_HOST_HOMOLOGA}" "docker-compose stop ${DOCKER_NAME_HOMOLOGACAO_API}; docker rmi -f ${CONTAINER_SERVER_RELEASE_IMAGE}; echo y|docker-compose up -d --no-deps --build ${DOCKER_NAME_HOMOLOGACAO_API}"
      - echo 'Imagens atualizadas'
