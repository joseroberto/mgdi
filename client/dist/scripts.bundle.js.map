{"version":3,"sources":["webpack:///./~/marked/lib/marked.js?fd72","webpack:///./~/script-loader/addScript.js?8107*","webpack:///./~/marked/lib/marked.js?b786"],"names":[],"mappings":"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","file":"scripts.bundle.js","sourcesContent":["require(\"!!/opt/workapp/node_modules/script-loader/addScript.js\")(require(\"!!/opt/workapp/node_modules/raw-loader/index.js!/opt/workapp/node_modules/marked/lib/marked.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader!./~/marked/lib/marked.js\n// module id = 478\n// module chunks = 5","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader/addScript.js\n// module id = 480\n// module chunks = 0 1 5","module.exports = \"/**\\n * marked - a markdown parser\\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\\n * https://github.com/chjj/marked\\n */\\n\\n;(function() {\\n\\n/**\\n * Block-Level Grammar\\n */\\n\\nvar block = {\\n  newline: /^\\\\n+/,\\n  code: /^( {4}[^\\\\n]+\\\\n*)+/,\\n  fences: noop,\\n  hr: /^( *[-*_]){3,} *(?:\\\\n+|$)/,\\n  heading: /^ *(#{1,6}) *([^\\\\n]+?) *#* *(?:\\\\n+|$)/,\\n  nptable: noop,\\n  lheading: /^([^\\\\n]+)\\\\n *(=|-){2,} *(?:\\\\n+|$)/,\\n  blockquote: /^( *>[^\\\\n]+(\\\\n(?!def)[^\\\\n]+)*\\\\n*)+/,\\n  list: /^( *)(bull) [\\\\s\\\\S]+?(?:hr|def|\\\\n{2,}(?! )(?!\\\\1bull )\\\\n*|\\\\s*$)/,\\n  html: /^ *(?:comment *(?:\\\\n|\\\\s*$)|closed *(?:\\\\n{2,}|\\\\s*$)|closing *(?:\\\\n{2,}|\\\\s*$))/,\\n  def: /^ *\\\\[([^\\\\]]+)\\\\]: *<?([^\\\\s>]+)>?(?: +[\\\"(]([^\\\\n]+)[\\\")])? *(?:\\\\n+|$)/,\\n  table: noop,\\n  paragraph: /^((?:[^\\\\n]+\\\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\\\n*/,\\n  text: /^[^\\\\n]+/\\n};\\n\\nblock.bullet = /(?:[*+-]|\\\\d+\\\\.)/;\\nblock.item = /^( *)(bull) [^\\\\n]*(?:\\\\n(?!\\\\1bull )[^\\\\n]*)*/;\\nblock.item = replace(block.item, 'gm')\\n  (/bull/g, block.bullet)\\n  ();\\n\\nblock.list = replace(block.list)\\n  (/bull/g, block.bullet)\\n  ('hr', '\\\\\\\\n+(?=\\\\\\\\1?(?:[-*_] *){3,}(?:\\\\\\\\n+|$))')\\n  ('def', '\\\\\\\\n+(?=' + block.def.source + ')')\\n  ();\\n\\nblock.blockquote = replace(block.blockquote)\\n  ('def', block.def)\\n  ();\\n\\nblock._tag = '(?!(?:'\\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\\n  + '|span|br|wbr|ins|del|img)\\\\\\\\b)\\\\\\\\w+(?!:/|[^\\\\\\\\w\\\\\\\\s@]*@)\\\\\\\\b';\\n\\nblock.html = replace(block.html)\\n  ('comment', /<!--[\\\\s\\\\S]*?-->/)\\n  ('closed', /<(tag)[\\\\s\\\\S]+?<\\\\/\\\\1>/)\\n  ('closing', /<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*?>/)\\n  (/tag/g, block._tag)\\n  ();\\n\\nblock.paragraph = replace(block.paragraph)\\n  ('hr', block.hr)\\n  ('heading', block.heading)\\n  ('lheading', block.lheading)\\n  ('blockquote', block.blockquote)\\n  ('tag', '<' + block._tag)\\n  ('def', block.def)\\n  ();\\n\\n/**\\n * Normal Block Grammar\\n */\\n\\nblock.normal = merge({}, block);\\n\\n/**\\n * GFM Block Grammar\\n */\\n\\nblock.gfm = merge({}, block.normal, {\\n  fences: /^ *(`{3,}|~{3,})[ \\\\.]*(\\\\S+)? *\\\\n([\\\\s\\\\S]*?)\\\\s*\\\\1 *(?:\\\\n+|$)/,\\n  paragraph: /^/,\\n  heading: /^ *(#{1,6}) +([^\\\\n]+?) *#* *(?:\\\\n+|$)/\\n});\\n\\nblock.gfm.paragraph = replace(block.paragraph)\\n  ('(?!', '(?!'\\n    + block.gfm.fences.source.replace('\\\\\\\\1', '\\\\\\\\2') + '|'\\n    + block.list.source.replace('\\\\\\\\1', '\\\\\\\\3') + '|')\\n  ();\\n\\n/**\\n * GFM + Tables Block Grammar\\n */\\n\\nblock.tables = merge({}, block.gfm, {\\n  nptable: /^ *(\\\\S.*\\\\|.*)\\\\n *([-:]+ *\\\\|[-| :]*)\\\\n((?:.*\\\\|.*(?:\\\\n|$))*)\\\\n*/,\\n  table: /^ *\\\\|(.+)\\\\n *\\\\|( *[-:]+[-| :]*)\\\\n((?: *\\\\|.*(?:\\\\n|$))*)\\\\n*/\\n});\\n\\n/**\\n * Block Lexer\\n */\\n\\nfunction Lexer(options) {\\n  this.tokens = [];\\n  this.tokens.links = {};\\n  this.options = options || marked.defaults;\\n  this.rules = block.normal;\\n\\n  if (this.options.gfm) {\\n    if (this.options.tables) {\\n      this.rules = block.tables;\\n    } else {\\n      this.rules = block.gfm;\\n    }\\n  }\\n}\\n\\n/**\\n * Expose Block Rules\\n */\\n\\nLexer.rules = block;\\n\\n/**\\n * Static Lex Method\\n */\\n\\nLexer.lex = function(src, options) {\\n  var lexer = new Lexer(options);\\n  return lexer.lex(src);\\n};\\n\\n/**\\n * Preprocessing\\n */\\n\\nLexer.prototype.lex = function(src) {\\n  src = src\\n    .replace(/\\\\r\\\\n|\\\\r/g, '\\\\n')\\n    .replace(/\\\\t/g, '    ')\\n    .replace(/\\\\u00a0/g, ' ')\\n    .replace(/\\\\u2424/g, '\\\\n');\\n\\n  return this.token(src, true);\\n};\\n\\n/**\\n * Lexing\\n */\\n\\nLexer.prototype.token = function(src, top, bq) {\\n  var src = src.replace(/^ +$/gm, '')\\n    , next\\n    , loose\\n    , cap\\n    , bull\\n    , b\\n    , item\\n    , space\\n    , i\\n    , l;\\n\\n  while (src) {\\n    // newline\\n    if (cap = this.rules.newline.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      if (cap[0].length > 1) {\\n        this.tokens.push({\\n          type: 'space'\\n        });\\n      }\\n    }\\n\\n    // code\\n    if (cap = this.rules.code.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      cap = cap[0].replace(/^ {4}/gm, '');\\n      this.tokens.push({\\n        type: 'code',\\n        text: !this.options.pedantic\\n          ? cap.replace(/\\\\n+$/, '')\\n          : cap\\n      });\\n      continue;\\n    }\\n\\n    // fences (gfm)\\n    if (cap = this.rules.fences.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'code',\\n        lang: cap[2],\\n        text: cap[3] || ''\\n      });\\n      continue;\\n    }\\n\\n    // heading\\n    if (cap = this.rules.heading.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'heading',\\n        depth: cap[1].length,\\n        text: cap[2]\\n      });\\n      continue;\\n    }\\n\\n    // table no leading pipe (gfm)\\n    if (top && (cap = this.rules.nptable.exec(src))) {\\n      src = src.substring(cap[0].length);\\n\\n      item = {\\n        type: 'table',\\n        header: cap[1].replace(/^ *| *\\\\| *$/g, '').split(/ *\\\\| */),\\n        align: cap[2].replace(/^ *|\\\\| *$/g, '').split(/ *\\\\| */),\\n        cells: cap[3].replace(/\\\\n$/, '').split('\\\\n')\\n      };\\n\\n      for (i = 0; i < item.align.length; i++) {\\n        if (/^ *-+: *$/.test(item.align[i])) {\\n          item.align[i] = 'right';\\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\\n          item.align[i] = 'center';\\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\\n          item.align[i] = 'left';\\n        } else {\\n          item.align[i] = null;\\n        }\\n      }\\n\\n      for (i = 0; i < item.cells.length; i++) {\\n        item.cells[i] = item.cells[i].split(/ *\\\\| */);\\n      }\\n\\n      this.tokens.push(item);\\n\\n      continue;\\n    }\\n\\n    // lheading\\n    if (cap = this.rules.lheading.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'heading',\\n        depth: cap[2] === '=' ? 1 : 2,\\n        text: cap[1]\\n      });\\n      continue;\\n    }\\n\\n    // hr\\n    if (cap = this.rules.hr.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'hr'\\n      });\\n      continue;\\n    }\\n\\n    // blockquote\\n    if (cap = this.rules.blockquote.exec(src)) {\\n      src = src.substring(cap[0].length);\\n\\n      this.tokens.push({\\n        type: 'blockquote_start'\\n      });\\n\\n      cap = cap[0].replace(/^ *> ?/gm, '');\\n\\n      // Pass `top` to keep the current\\n      // \\\"toplevel\\\" state. This is exactly\\n      // how markdown.pl works.\\n      this.token(cap, top, true);\\n\\n      this.tokens.push({\\n        type: 'blockquote_end'\\n      });\\n\\n      continue;\\n    }\\n\\n    // list\\n    if (cap = this.rules.list.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      bull = cap[2];\\n\\n      this.tokens.push({\\n        type: 'list_start',\\n        ordered: bull.length > 1\\n      });\\n\\n      // Get each top-level item.\\n      cap = cap[0].match(this.rules.item);\\n\\n      next = false;\\n      l = cap.length;\\n      i = 0;\\n\\n      for (; i < l; i++) {\\n        item = cap[i];\\n\\n        // Remove the list item's bullet\\n        // so it is seen as the next token.\\n        space = item.length;\\n        item = item.replace(/^ *([*+-]|\\\\d+\\\\.) +/, '');\\n\\n        // Outdent whatever the\\n        // list item contains. Hacky.\\n        if (~item.indexOf('\\\\n ')) {\\n          space -= item.length;\\n          item = !this.options.pedantic\\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\\n            : item.replace(/^ {1,4}/gm, '');\\n        }\\n\\n        // Determine whether the next list item belongs here.\\n        // Backpedal if it does not belong in this list.\\n        if (this.options.smartLists && i !== l - 1) {\\n          b = block.bullet.exec(cap[i + 1])[0];\\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\\n            src = cap.slice(i + 1).join('\\\\n') + src;\\n            i = l - 1;\\n          }\\n        }\\n\\n        // Determine whether item is loose or not.\\n        // Use: /(^|\\\\n)(?! )[^\\\\n]+\\\\n\\\\n(?!\\\\s*$)/\\n        // for discount behavior.\\n        loose = next || /\\\\n\\\\n(?!\\\\s*$)/.test(item);\\n        if (i !== l - 1) {\\n          next = item.charAt(item.length - 1) === '\\\\n';\\n          if (!loose) loose = next;\\n        }\\n\\n        this.tokens.push({\\n          type: loose\\n            ? 'loose_item_start'\\n            : 'list_item_start'\\n        });\\n\\n        // Recurse.\\n        this.token(item, false, bq);\\n\\n        this.tokens.push({\\n          type: 'list_item_end'\\n        });\\n      }\\n\\n      this.tokens.push({\\n        type: 'list_end'\\n      });\\n\\n      continue;\\n    }\\n\\n    // html\\n    if (cap = this.rules.html.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: this.options.sanitize\\n          ? 'paragraph'\\n          : 'html',\\n        pre: !this.options.sanitizer\\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\\n        text: cap[0]\\n      });\\n      continue;\\n    }\\n\\n    // def\\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.links[cap[1].toLowerCase()] = {\\n        href: cap[2],\\n        title: cap[3]\\n      };\\n      continue;\\n    }\\n\\n    // table (gfm)\\n    if (top && (cap = this.rules.table.exec(src))) {\\n      src = src.substring(cap[0].length);\\n\\n      item = {\\n        type: 'table',\\n        header: cap[1].replace(/^ *| *\\\\| *$/g, '').split(/ *\\\\| */),\\n        align: cap[2].replace(/^ *|\\\\| *$/g, '').split(/ *\\\\| */),\\n        cells: cap[3].replace(/(?: *\\\\| *)?\\\\n$/, '').split('\\\\n')\\n      };\\n\\n      for (i = 0; i < item.align.length; i++) {\\n        if (/^ *-+: *$/.test(item.align[i])) {\\n          item.align[i] = 'right';\\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\\n          item.align[i] = 'center';\\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\\n          item.align[i] = 'left';\\n        } else {\\n          item.align[i] = null;\\n        }\\n      }\\n\\n      for (i = 0; i < item.cells.length; i++) {\\n        item.cells[i] = item.cells[i]\\n          .replace(/^ *\\\\| *| *\\\\| *$/g, '')\\n          .split(/ *\\\\| */);\\n      }\\n\\n      this.tokens.push(item);\\n\\n      continue;\\n    }\\n\\n    // top-level paragraph\\n    if (top && (cap = this.rules.paragraph.exec(src))) {\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'paragraph',\\n        text: cap[1].charAt(cap[1].length - 1) === '\\\\n'\\n          ? cap[1].slice(0, -1)\\n          : cap[1]\\n      });\\n      continue;\\n    }\\n\\n    // text\\n    if (cap = this.rules.text.exec(src)) {\\n      // Top-level should never reach here.\\n      src = src.substring(cap[0].length);\\n      this.tokens.push({\\n        type: 'text',\\n        text: cap[0]\\n      });\\n      continue;\\n    }\\n\\n    if (src) {\\n      throw new\\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\\n    }\\n  }\\n\\n  return this.tokens;\\n};\\n\\n/**\\n * Inline-Level Grammar\\n */\\n\\nvar inline = {\\n  escape: /^\\\\\\\\([\\\\\\\\`*{}\\\\[\\\\]()#+\\\\-.!_>])/,\\n  autolink: /^<([^ >]+(@|:\\\\/)[^ >]+)>/,\\n  url: noop,\\n  tag: /^<!--[\\\\s\\\\S]*?-->|^<\\\\/?\\\\w+(?:\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*?>/,\\n  link: /^!?\\\\[(inside)\\\\]\\\\(href\\\\)/,\\n  reflink: /^!?\\\\[(inside)\\\\]\\\\s*\\\\[([^\\\\]]*)\\\\]/,\\n  nolink: /^!?\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]])*)\\\\]/,\\n  strong: /^__([\\\\s\\\\S]+?)__(?!_)|^\\\\*\\\\*([\\\\s\\\\S]+?)\\\\*\\\\*(?!\\\\*)/,\\n  em: /^\\\\b_((?:[^_]|__)+?)_\\\\b|^\\\\*((?:\\\\*\\\\*|[\\\\s\\\\S])+?)\\\\*(?!\\\\*)/,\\n  code: /^(`+)\\\\s*([\\\\s\\\\S]*?[^`])\\\\s*\\\\1(?!`)/,\\n  br: /^ {2,}\\\\n(?!\\\\s*$)/,\\n  del: noop,\\n  text: /^[\\\\s\\\\S]+?(?=[\\\\\\\\<!\\\\[_*`]| {2,}\\\\n|$)/\\n};\\n\\ninline._inside = /(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*/;\\ninline._href = /\\\\s*<?([\\\\s\\\\S]*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*/;\\n\\ninline.link = replace(inline.link)\\n  ('inside', inline._inside)\\n  ('href', inline._href)\\n  ();\\n\\ninline.reflink = replace(inline.reflink)\\n  ('inside', inline._inside)\\n  ();\\n\\n/**\\n * Normal Inline Grammar\\n */\\n\\ninline.normal = merge({}, inline);\\n\\n/**\\n * Pedantic Inline Grammar\\n */\\n\\ninline.pedantic = merge({}, inline.normal, {\\n  strong: /^__(?=\\\\S)([\\\\s\\\\S]*?\\\\S)__(?!_)|^\\\\*\\\\*(?=\\\\S)([\\\\s\\\\S]*?\\\\S)\\\\*\\\\*(?!\\\\*)/,\\n  em: /^_(?=\\\\S)([\\\\s\\\\S]*?\\\\S)_(?!_)|^\\\\*(?=\\\\S)([\\\\s\\\\S]*?\\\\S)\\\\*(?!\\\\*)/\\n});\\n\\n/**\\n * GFM Inline Grammar\\n */\\n\\ninline.gfm = merge({}, inline.normal, {\\n  escape: replace(inline.escape)('])', '~|])')(),\\n  url: /^(https?:\\\\/\\\\/[^\\\\s<]+[^<.,:;\\\"')\\\\]\\\\s])/,\\n  del: /^~~(?=\\\\S)([\\\\s\\\\S]*?\\\\S)~~/,\\n  text: replace(inline.text)\\n    (']|', '~]|')\\n    ('|', '|https?://|')\\n    ()\\n});\\n\\n/**\\n * GFM + Line Breaks Inline Grammar\\n */\\n\\ninline.breaks = merge({}, inline.gfm, {\\n  br: replace(inline.br)('{2,}', '*')(),\\n  text: replace(inline.gfm.text)('{2,}', '*')()\\n});\\n\\n/**\\n * Inline Lexer & Compiler\\n */\\n\\nfunction InlineLexer(links, options) {\\n  this.options = options || marked.defaults;\\n  this.links = links;\\n  this.rules = inline.normal;\\n  this.renderer = this.options.renderer || new Renderer;\\n  this.renderer.options = this.options;\\n\\n  if (!this.links) {\\n    throw new\\n      Error('Tokens array requires a `links` property.');\\n  }\\n\\n  if (this.options.gfm) {\\n    if (this.options.breaks) {\\n      this.rules = inline.breaks;\\n    } else {\\n      this.rules = inline.gfm;\\n    }\\n  } else if (this.options.pedantic) {\\n    this.rules = inline.pedantic;\\n  }\\n}\\n\\n/**\\n * Expose Inline Rules\\n */\\n\\nInlineLexer.rules = inline;\\n\\n/**\\n * Static Lexing/Compiling Method\\n */\\n\\nInlineLexer.output = function(src, links, options) {\\n  var inline = new InlineLexer(links, options);\\n  return inline.output(src);\\n};\\n\\n/**\\n * Lexing/Compiling\\n */\\n\\nInlineLexer.prototype.output = function(src) {\\n  var out = ''\\n    , link\\n    , text\\n    , href\\n    , cap;\\n\\n  while (src) {\\n    // escape\\n    if (cap = this.rules.escape.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += cap[1];\\n      continue;\\n    }\\n\\n    // autolink\\n    if (cap = this.rules.autolink.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      if (cap[2] === '@') {\\n        text = cap[1].charAt(6) === ':'\\n          ? this.mangle(cap[1].substring(7))\\n          : this.mangle(cap[1]);\\n        href = this.mangle('mailto:') + text;\\n      } else {\\n        text = escape(cap[1]);\\n        href = text;\\n      }\\n      out += this.renderer.link(href, null, text);\\n      continue;\\n    }\\n\\n    // url (gfm)\\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\\n      src = src.substring(cap[0].length);\\n      text = escape(cap[1]);\\n      href = text;\\n      out += this.renderer.link(href, null, text);\\n      continue;\\n    }\\n\\n    // tag\\n    if (cap = this.rules.tag.exec(src)) {\\n      if (!this.inLink && /^<a /i.test(cap[0])) {\\n        this.inLink = true;\\n      } else if (this.inLink && /^<\\\\/a>/i.test(cap[0])) {\\n        this.inLink = false;\\n      }\\n      src = src.substring(cap[0].length);\\n      out += this.options.sanitize\\n        ? this.options.sanitizer\\n          ? this.options.sanitizer(cap[0])\\n          : escape(cap[0])\\n        : cap[0]\\n      continue;\\n    }\\n\\n    // link\\n    if (cap = this.rules.link.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      this.inLink = true;\\n      out += this.outputLink(cap, {\\n        href: cap[2],\\n        title: cap[3]\\n      });\\n      this.inLink = false;\\n      continue;\\n    }\\n\\n    // reflink, nolink\\n    if ((cap = this.rules.reflink.exec(src))\\n        || (cap = this.rules.nolink.exec(src))) {\\n      src = src.substring(cap[0].length);\\n      link = (cap[2] || cap[1]).replace(/\\\\s+/g, ' ');\\n      link = this.links[link.toLowerCase()];\\n      if (!link || !link.href) {\\n        out += cap[0].charAt(0);\\n        src = cap[0].substring(1) + src;\\n        continue;\\n      }\\n      this.inLink = true;\\n      out += this.outputLink(cap, link);\\n      this.inLink = false;\\n      continue;\\n    }\\n\\n    // strong\\n    if (cap = this.rules.strong.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\\n      continue;\\n    }\\n\\n    // em\\n    if (cap = this.rules.em.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\\n      continue;\\n    }\\n\\n    // code\\n    if (cap = this.rules.code.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.codespan(escape(cap[2], true));\\n      continue;\\n    }\\n\\n    // br\\n    if (cap = this.rules.br.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.br();\\n      continue;\\n    }\\n\\n    // del (gfm)\\n    if (cap = this.rules.del.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.del(this.output(cap[1]));\\n      continue;\\n    }\\n\\n    // text\\n    if (cap = this.rules.text.exec(src)) {\\n      src = src.substring(cap[0].length);\\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\\n      continue;\\n    }\\n\\n    if (src) {\\n      throw new\\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\\n    }\\n  }\\n\\n  return out;\\n};\\n\\n/**\\n * Compile Link\\n */\\n\\nInlineLexer.prototype.outputLink = function(cap, link) {\\n  var href = escape(link.href)\\n    , title = link.title ? escape(link.title) : null;\\n\\n  return cap[0].charAt(0) !== '!'\\n    ? this.renderer.link(href, title, this.output(cap[1]))\\n    : this.renderer.image(href, title, escape(cap[1]));\\n};\\n\\n/**\\n * Smartypants Transformations\\n */\\n\\nInlineLexer.prototype.smartypants = function(text) {\\n  if (!this.options.smartypants) return text;\\n  return text\\n    // em-dashes\\n    .replace(/---/g, '\\\\u2014')\\n    // en-dashes\\n    .replace(/--/g, '\\\\u2013')\\n    // opening singles\\n    .replace(/(^|[-\\\\u2014/(\\\\[{\\\"\\\\s])'/g, '$1\\\\u2018')\\n    // closing singles & apostrophes\\n    .replace(/'/g, '\\\\u2019')\\n    // opening doubles\\n    .replace(/(^|[-\\\\u2014/(\\\\[{\\\\u2018\\\\s])\\\"/g, '$1\\\\u201c')\\n    // closing doubles\\n    .replace(/\\\"/g, '\\\\u201d')\\n    // ellipses\\n    .replace(/\\\\.{3}/g, '\\\\u2026');\\n};\\n\\n/**\\n * Mangle Links\\n */\\n\\nInlineLexer.prototype.mangle = function(text) {\\n  if (!this.options.mangle) return text;\\n  var out = ''\\n    , l = text.length\\n    , i = 0\\n    , ch;\\n\\n  for (; i < l; i++) {\\n    ch = text.charCodeAt(i);\\n    if (Math.random() > 0.5) {\\n      ch = 'x' + ch.toString(16);\\n    }\\n    out += '&#' + ch + ';';\\n  }\\n\\n  return out;\\n};\\n\\n/**\\n * Renderer\\n */\\n\\nfunction Renderer(options) {\\n  this.options = options || {};\\n}\\n\\nRenderer.prototype.code = function(code, lang, escaped) {\\n  if (this.options.highlight) {\\n    var out = this.options.highlight(code, lang);\\n    if (out != null && out !== code) {\\n      escaped = true;\\n      code = out;\\n    }\\n  }\\n\\n  if (!lang) {\\n    return '<pre><code>'\\n      + (escaped ? code : escape(code, true))\\n      + '\\\\n</code></pre>';\\n  }\\n\\n  return '<pre><code class=\\\"'\\n    + this.options.langPrefix\\n    + escape(lang, true)\\n    + '\\\">'\\n    + (escaped ? code : escape(code, true))\\n    + '\\\\n</code></pre>\\\\n';\\n};\\n\\nRenderer.prototype.blockquote = function(quote) {\\n  return '<blockquote>\\\\n' + quote + '</blockquote>\\\\n';\\n};\\n\\nRenderer.prototype.html = function(html) {\\n  return html;\\n};\\n\\nRenderer.prototype.heading = function(text, level, raw) {\\n  return '<h'\\n    + level\\n    + ' id=\\\"'\\n    + this.options.headerPrefix\\n    + raw.toLowerCase().replace(/[^\\\\w]+/g, '-')\\n    + '\\\">'\\n    + text\\n    + '</h'\\n    + level\\n    + '>\\\\n';\\n};\\n\\nRenderer.prototype.hr = function() {\\n  return this.options.xhtml ? '<hr/>\\\\n' : '<hr>\\\\n';\\n};\\n\\nRenderer.prototype.list = function(body, ordered) {\\n  var type = ordered ? 'ol' : 'ul';\\n  return '<' + type + '>\\\\n' + body + '</' + type + '>\\\\n';\\n};\\n\\nRenderer.prototype.listitem = function(text) {\\n  return '<li>' + text + '</li>\\\\n';\\n};\\n\\nRenderer.prototype.paragraph = function(text) {\\n  return '<p>' + text + '</p>\\\\n';\\n};\\n\\nRenderer.prototype.table = function(header, body) {\\n  return '<table>\\\\n'\\n    + '<thead>\\\\n'\\n    + header\\n    + '</thead>\\\\n'\\n    + '<tbody>\\\\n'\\n    + body\\n    + '</tbody>\\\\n'\\n    + '</table>\\\\n';\\n};\\n\\nRenderer.prototype.tablerow = function(content) {\\n  return '<tr>\\\\n' + content + '</tr>\\\\n';\\n};\\n\\nRenderer.prototype.tablecell = function(content, flags) {\\n  var type = flags.header ? 'th' : 'td';\\n  var tag = flags.align\\n    ? '<' + type + ' style=\\\"text-align:' + flags.align + '\\\">'\\n    : '<' + type + '>';\\n  return tag + content + '</' + type + '>\\\\n';\\n};\\n\\n// span level renderer\\nRenderer.prototype.strong = function(text) {\\n  return '<strong>' + text + '</strong>';\\n};\\n\\nRenderer.prototype.em = function(text) {\\n  return '<em>' + text + '</em>';\\n};\\n\\nRenderer.prototype.codespan = function(text) {\\n  return '<code>' + text + '</code>';\\n};\\n\\nRenderer.prototype.br = function() {\\n  return this.options.xhtml ? '<br/>' : '<br>';\\n};\\n\\nRenderer.prototype.del = function(text) {\\n  return '<del>' + text + '</del>';\\n};\\n\\nRenderer.prototype.link = function(href, title, text) {\\n  if (this.options.sanitize) {\\n    try {\\n      var prot = decodeURIComponent(unescape(href))\\n        .replace(/[^\\\\w:]/g, '')\\n        .toLowerCase();\\n    } catch (e) {\\n      return '';\\n    }\\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\\n      return '';\\n    }\\n  }\\n  var out = '<a href=\\\"' + href + '\\\"';\\n  if (title) {\\n    out += ' title=\\\"' + title + '\\\"';\\n  }\\n  out += '>' + text + '</a>';\\n  return out;\\n};\\n\\nRenderer.prototype.image = function(href, title, text) {\\n  var out = '<img src=\\\"' + href + '\\\" alt=\\\"' + text + '\\\"';\\n  if (title) {\\n    out += ' title=\\\"' + title + '\\\"';\\n  }\\n  out += this.options.xhtml ? '/>' : '>';\\n  return out;\\n};\\n\\nRenderer.prototype.text = function(text) {\\n  return text;\\n};\\n\\n/**\\n * Parsing & Compiling\\n */\\n\\nfunction Parser(options) {\\n  this.tokens = [];\\n  this.token = null;\\n  this.options = options || marked.defaults;\\n  this.options.renderer = this.options.renderer || new Renderer;\\n  this.renderer = this.options.renderer;\\n  this.renderer.options = this.options;\\n}\\n\\n/**\\n * Static Parse Method\\n */\\n\\nParser.parse = function(src, options, renderer) {\\n  var parser = new Parser(options, renderer);\\n  return parser.parse(src);\\n};\\n\\n/**\\n * Parse Loop\\n */\\n\\nParser.prototype.parse = function(src) {\\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\\n  this.tokens = src.reverse();\\n\\n  var out = '';\\n  while (this.next()) {\\n    out += this.tok();\\n  }\\n\\n  return out;\\n};\\n\\n/**\\n * Next Token\\n */\\n\\nParser.prototype.next = function() {\\n  return this.token = this.tokens.pop();\\n};\\n\\n/**\\n * Preview Next Token\\n */\\n\\nParser.prototype.peek = function() {\\n  return this.tokens[this.tokens.length - 1] || 0;\\n};\\n\\n/**\\n * Parse Text Tokens\\n */\\n\\nParser.prototype.parseText = function() {\\n  var body = this.token.text;\\n\\n  while (this.peek().type === 'text') {\\n    body += '\\\\n' + this.next().text;\\n  }\\n\\n  return this.inline.output(body);\\n};\\n\\n/**\\n * Parse Current Token\\n */\\n\\nParser.prototype.tok = function() {\\n  switch (this.token.type) {\\n    case 'space': {\\n      return '';\\n    }\\n    case 'hr': {\\n      return this.renderer.hr();\\n    }\\n    case 'heading': {\\n      return this.renderer.heading(\\n        this.inline.output(this.token.text),\\n        this.token.depth,\\n        this.token.text);\\n    }\\n    case 'code': {\\n      return this.renderer.code(this.token.text,\\n        this.token.lang,\\n        this.token.escaped);\\n    }\\n    case 'table': {\\n      var header = ''\\n        , body = ''\\n        , i\\n        , row\\n        , cell\\n        , flags\\n        , j;\\n\\n      // header\\n      cell = '';\\n      for (i = 0; i < this.token.header.length; i++) {\\n        flags = { header: true, align: this.token.align[i] };\\n        cell += this.renderer.tablecell(\\n          this.inline.output(this.token.header[i]),\\n          { header: true, align: this.token.align[i] }\\n        );\\n      }\\n      header += this.renderer.tablerow(cell);\\n\\n      for (i = 0; i < this.token.cells.length; i++) {\\n        row = this.token.cells[i];\\n\\n        cell = '';\\n        for (j = 0; j < row.length; j++) {\\n          cell += this.renderer.tablecell(\\n            this.inline.output(row[j]),\\n            { header: false, align: this.token.align[j] }\\n          );\\n        }\\n\\n        body += this.renderer.tablerow(cell);\\n      }\\n      return this.renderer.table(header, body);\\n    }\\n    case 'blockquote_start': {\\n      var body = '';\\n\\n      while (this.next().type !== 'blockquote_end') {\\n        body += this.tok();\\n      }\\n\\n      return this.renderer.blockquote(body);\\n    }\\n    case 'list_start': {\\n      var body = ''\\n        , ordered = this.token.ordered;\\n\\n      while (this.next().type !== 'list_end') {\\n        body += this.tok();\\n      }\\n\\n      return this.renderer.list(body, ordered);\\n    }\\n    case 'list_item_start': {\\n      var body = '';\\n\\n      while (this.next().type !== 'list_item_end') {\\n        body += this.token.type === 'text'\\n          ? this.parseText()\\n          : this.tok();\\n      }\\n\\n      return this.renderer.listitem(body);\\n    }\\n    case 'loose_item_start': {\\n      var body = '';\\n\\n      while (this.next().type !== 'list_item_end') {\\n        body += this.tok();\\n      }\\n\\n      return this.renderer.listitem(body);\\n    }\\n    case 'html': {\\n      var html = !this.token.pre && !this.options.pedantic\\n        ? this.inline.output(this.token.text)\\n        : this.token.text;\\n      return this.renderer.html(html);\\n    }\\n    case 'paragraph': {\\n      return this.renderer.paragraph(this.inline.output(this.token.text));\\n    }\\n    case 'text': {\\n      return this.renderer.paragraph(this.parseText());\\n    }\\n  }\\n};\\n\\n/**\\n * Helpers\\n */\\n\\nfunction escape(html, encode) {\\n  return html\\n    .replace(!encode ? /&(?!#?\\\\w+;)/g : /&/g, '&amp;')\\n    .replace(/</g, '&lt;')\\n    .replace(/>/g, '&gt;')\\n    .replace(/\\\"/g, '&quot;')\\n    .replace(/'/g, '&#39;');\\n}\\n\\nfunction unescape(html) {\\n\\t// explicitly match decimal, hex, and named HTML entities \\n  return html.replace(/&(#(?:\\\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\\\w+));?/g, function(_, n) {\\n    n = n.toLowerCase();\\n    if (n === 'colon') return ':';\\n    if (n.charAt(0) === '#') {\\n      return n.charAt(1) === 'x'\\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\\n        : String.fromCharCode(+n.substring(1));\\n    }\\n    return '';\\n  });\\n}\\n\\nfunction replace(regex, opt) {\\n  regex = regex.source;\\n  opt = opt || '';\\n  return function self(name, val) {\\n    if (!name) return new RegExp(regex, opt);\\n    val = val.source || val;\\n    val = val.replace(/(^|[^\\\\[])\\\\^/g, '$1');\\n    regex = regex.replace(name, val);\\n    return self;\\n  };\\n}\\n\\nfunction noop() {}\\nnoop.exec = noop;\\n\\nfunction merge(obj) {\\n  var i = 1\\n    , target\\n    , key;\\n\\n  for (; i < arguments.length; i++) {\\n    target = arguments[i];\\n    for (key in target) {\\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\\n        obj[key] = target[key];\\n      }\\n    }\\n  }\\n\\n  return obj;\\n}\\n\\n\\n/**\\n * Marked\\n */\\n\\nfunction marked(src, opt, callback) {\\n  if (callback || typeof opt === 'function') {\\n    if (!callback) {\\n      callback = opt;\\n      opt = null;\\n    }\\n\\n    opt = merge({}, marked.defaults, opt || {});\\n\\n    var highlight = opt.highlight\\n      , tokens\\n      , pending\\n      , i = 0;\\n\\n    try {\\n      tokens = Lexer.lex(src, opt)\\n    } catch (e) {\\n      return callback(e);\\n    }\\n\\n    pending = tokens.length;\\n\\n    var done = function(err) {\\n      if (err) {\\n        opt.highlight = highlight;\\n        return callback(err);\\n      }\\n\\n      var out;\\n\\n      try {\\n        out = Parser.parse(tokens, opt);\\n      } catch (e) {\\n        err = e;\\n      }\\n\\n      opt.highlight = highlight;\\n\\n      return err\\n        ? callback(err)\\n        : callback(null, out);\\n    };\\n\\n    if (!highlight || highlight.length < 3) {\\n      return done();\\n    }\\n\\n    delete opt.highlight;\\n\\n    if (!pending) return done();\\n\\n    for (; i < tokens.length; i++) {\\n      (function(token) {\\n        if (token.type !== 'code') {\\n          return --pending || done();\\n        }\\n        return highlight(token.text, token.lang, function(err, code) {\\n          if (err) return done(err);\\n          if (code == null || code === token.text) {\\n            return --pending || done();\\n          }\\n          token.text = code;\\n          token.escaped = true;\\n          --pending || done();\\n        });\\n      })(tokens[i]);\\n    }\\n\\n    return;\\n  }\\n  try {\\n    if (opt) opt = merge({}, marked.defaults, opt);\\n    return Parser.parse(Lexer.lex(src, opt), opt);\\n  } catch (e) {\\n    e.message += '\\\\nPlease report this to https://github.com/chjj/marked.';\\n    if ((opt || marked.defaults).silent) {\\n      return '<p>An error occured:</p><pre>'\\n        + escape(e.message + '', true)\\n        + '</pre>';\\n    }\\n    throw e;\\n  }\\n}\\n\\n/**\\n * Options\\n */\\n\\nmarked.options =\\nmarked.setOptions = function(opt) {\\n  merge(marked.defaults, opt);\\n  return marked;\\n};\\n\\nmarked.defaults = {\\n  gfm: true,\\n  tables: true,\\n  breaks: false,\\n  pedantic: false,\\n  sanitize: false,\\n  sanitizer: null,\\n  mangle: true,\\n  smartLists: false,\\n  silent: false,\\n  highlight: null,\\n  langPrefix: 'lang-',\\n  smartypants: false,\\n  headerPrefix: '',\\n  renderer: new Renderer,\\n  xhtml: false\\n};\\n\\n/**\\n * Expose\\n */\\n\\nmarked.Parser = Parser;\\nmarked.parser = Parser.parse;\\n\\nmarked.Renderer = Renderer;\\n\\nmarked.Lexer = Lexer;\\nmarked.lexer = Lexer.lex;\\n\\nmarked.InlineLexer = InlineLexer;\\nmarked.inlineLexer = InlineLexer.output;\\n\\nmarked.parse = marked;\\n\\nif (typeof module !== 'undefined' && typeof exports === 'object') {\\n  module.exports = marked;\\n} else if (typeof define === 'function' && define.amd) {\\n  define(function() { return marked; });\\n} else {\\n  this.marked = marked;\\n}\\n\\n}).call(function() {\\n  return this || (typeof window !== 'undefined' ? window : global);\\n}());\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/marked/lib/marked.js\n// module id = 801\n// module chunks = 5"],"sourceRoot":""}